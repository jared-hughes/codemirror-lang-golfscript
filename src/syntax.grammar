@top Program { expression* }

@skip { LineComment }

expression {
  syntaxIdentifier |
  Block { "{" expression* "}" } |
  Assignment { ":" syntaxIdentifier }
}

syntaxIdentifier { Builtin | Identifier | String | Number }

Identifier { wordIdentifier | singleByteIdentifier }

Builtin {
  @specialize<singleByteIdentifier,
    "~" | "`" | "!" | "@" | "$" | "+" | "-" | "*" | "/" |
    "%" | "|" | "&" | "^" | "[" | "]" | "\\" | ";" | "<" |
    ">" | "=" | "," | "." | "?" | "(" | ")"
  > |
  @specialize<wordIdentifier,
    "and" | "or" | "xor" | "print" | "p" | "n" | "puts" | "rand" |
    "do" | "while" | "until" | "if" | "abs" | "zip" | "base"
  >
}

@tokens {
  wordIdentifier { $[a-zA-Z_]$[a-zA-Z0-9_]* }

  // Note: newlines and spaces are singleCharIdentifier
  singleByteIdentifier { ![#{}:] }
  @precedence { wordIdentifier, singleByteIdentifier }

  String {
    '"' ("\\" _ | !["] )* '"' |
    "'" ("\\" _ | !['] )* "'"
  }
  @precedence { String, singleByteIdentifier }

  Number { "-"? $[0-9]+ }
  @precedence { Number, singleByteIdentifier }

  LineComment { "#" ![\n\r]* }

  "{" "}" ":"
}

@detectDelim
